#!/usr/bin/env python

import subprocess
import yaml
import cv2
import os.path
import re
import numpy as np

class COLMAP:
	def __init__(self):
		self.yml_path = "./yml_colmap"
		self.filename_yml = "camera_param"

	def CheckColmapInstallation(self):
		cmd = "colmap -h"
		try:
			res = subprocess.check_output(cmd.split())
			if (res.split())[0] == "COLMAP":
				print("colmap : OK")

			else:
				print("Error : Cannot find colmap")

		except subprocess.CalledProcessError as e:
			print("Cannot call unix command")
			print(e)

	def Sparse_reconstruction(self, _group_path):
		_database_path = _group_path+"/database.db"
		_image_path = _group_path+"/images"
		_sparse_path = _group_path+"/sparse"

		subprocess.call("mkdir -p "+_sparse_path, shell = True)

		feature_extract_cmd = "colmap feature_extractor --ImageReader.single_camera 1 --database_path " + _database_path + " --ImageReader.camera_model OPENCV --image_path "+_image_path
		feature_matching_cmd = "colmap exhaustive_matcher --database_path " + _database_path
		sparse_cmd = "colmap mapper --database_path " + _database_path +  " --export_path "+_sparse_path+ " --image_path "+_image_path
	
		cmd = feature_extract_cmd + " ; " + feature_matching_cmd + " ; " + sparse_cmd

		subprocess.call(cmd, shell = True)
		if os.path.isdir(_sparse_path+"/0"):
			if os.path.isdir(_sparse_path+"/1"):
				print("The calibrated intrinsics might not be expected result")
			
			return True
		else:
			print("Failure : Sparse reconstruction")
			return False

	def Dense_reconstruction(self, _group_path):
		if not self.Sparse_reconstruction(_group_path = _group_path):
			return None

		_database_path = _group_path+"/database.db"
		_image_path = _group_path+"/images"
		_sparse_path = _group_path+"/sparse/0"
		_dense_path = _group_path + "/dense"
		_model_path = _group_path + "/model"

		subprocess.call("mkdir -p "+_dense_path, shell = True)
		subprocess.call("mkdir -p "+_model_path, shell = True)

		undistorter_cmd = "colmap image_undistorter --input_path "+_sparse_path +" --output_path "+_dense_path+" --output_type COLMAP --max_image_size 2000 --image_path " + _image_path
		stereo_cmd = "colmap dense_stereo --workspace_path "+_dense_path+" --workspace_format COLMAP --DenseStereo.geom_consistency true"
		fuser_cmd = "colmap dense_fuser --workspace_path "+_dense_path+" --workspace_format COLMAP --input_type geometric --output_path "+_model_path+"/fused.ply"
		mesher_cmd = "colmap dense_mesher --input_path "+_model_path+"/fused.ply --output_path "+_model_path+"/meshed.ply"

		cmd = undistorter_cmd + " ; " + stereo_cmd + " ; " + fuser_cmd + " ; " + mesher_cmd
	
		subprocess.call(cmd, shell = True)
		return None

	def WriteIntrinsics(self, _group_path):
		_model_path = _group_path + "/model"
		with open(_model_path + "/cameras.txt") as cf:
			cfstr = cf.readlines()
			#intr = cfstr[3].split(" ")
			intr = re.split('[ \n]',cfstr[3])[:-1]
			subprocess.call("mkdir -p "+self.yml_path, shell = True)

			_filename = self.yml_path + "/" + self.filename_yml
			
			if os.path.splitext(_filename)[1] == '':
				_filename +=".yml"

			with open(_filename, "wt") as fp:
				if fp is None:
					print(_filename+ "No such file or directry")
				else:
					fp.write("%YAML:1.0 #Generated by COLMAP\n")
					fp.write("ImageSize: "+str([int(intr[2]), int(intr[3])]))

			if os.path.isfile(_filename):
				fp=cv2.FileStorage(_filename, flags=2)
				Extrinsic = np.identity(4)
				CameraMat = np.identity(3)
				CameraMat[0][0] = float(intr[4])
				CameraMat[0][2] = float(intr[6])
				CameraMat[1][1] = float(intr[5])
				CameraMat[1][2] = float(intr[7])
				DistCoeff = np.matrix(np.array(list(map(lambda value:float(value), intr[8:]))))
				fp.write(name='CameraExtrinsicMat',val=Extrinsic)
				fp.write(name='CameraMat',val=CameraMat)
				fp.write(name='DistCoeff',val=DistCoeff)
				fp.write(name='ReprojectionError', val=0.0)
				fp.release()

			print("Output : " + _filename)
